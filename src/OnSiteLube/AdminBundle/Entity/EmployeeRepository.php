<?php

namespace OnSiteLube\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EmployeeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmployeeRepository extends EntityRepository {

  /**
   * @return array
   */
  public function findAll() {
    $dql = "SELECT e.id, e.employeeId, uac.firstName, uac.lastName, a.address FROM OnSiteLubeAdminBundle:Employee e join e.userAccount uac join e.address a ";
    $query = $this->getEntityManager()->createQuery($dql);
    return $query->getResult();
  }


  /**
   * @param $id
   *
   * @return array
   */
  public function findByUserAccountId($id) {
    $dql  = "SELECT uac.id as userAccountId, e.id as employeeId, uac.firstName, uac.lastName, uac.email, uac.username, a.address, g.id as genderId, g.name as gender, ";
    $dql .= "a.city, a.state, a.postalCode, uac.password, uac.phone, CONCAT(uac.firstName, ' ', uac.lastName) as FullName, cl.id as locationId, cl.name as locationName, ";
    $dql .= "cv.id, cv.unitNumber, e.isActive, e.employeeId empIdentifier ";
    $dql .= "FROM OnSiteLubeAdminBundle:Employee e join e.userAccount uac join e.address a join e.companyLocation cl join e.companyVehicle cv join uac.gender g ";
    $dql .= "where uac.id = :userAccountId";
    $query = $this->getEntityManager()->createQuery($dql)
      ->setParameters(array('userAccountId' => $id));
    return $query->getResult();
  }

  /**
   * @return array
   */
  public function findAllForAutoComplete() {
    $dql  = "SELECT uac.id as userAccountId, CONCAT(uac.firstName, ' ', uac.lastName) as FullName ";
    $dql .= "FROM OnSiteLubeAdminBundle:Employee e join e.userAccount uac";
    $query = $this->getEntityManager()->createQuery($dql);
    return $query->getResult();
  }

  /**
   * @param $input
   *
   * @return null|object
   */
  public function addEmployee($input) {
    $em = $this->getEntityManager();

    $userAccount = new UserAccount();
    $employee = new Employee();
    $address = new Address();

    $employee->setAddress($address);
    $employee->setUserAccount($userAccount);

    $companyLocation = $em->getRepository('OnSiteLubeAdminBundle:CompanyLocation')->find($input->locationId);
    $companyVehicle = $em->getRepository('OnSiteLubeAdminBundle:CompanyVehicle')->find($input->vehicleId);
    $gender = $em->getRepository('OnSiteLubeAdminBundle:Gender')->find($input->genderId);

    $address = $employee->getAddress();
    $address->setAddress($input->address);
    $address->setCity($input->city);
    $address->setState($input->state);
    $address->setPostalCode($input->postalCode);
    $address->setCountry('United States');
    $em->persist($address);

    $userAccount->setFirstName($input->firstName);
    $userAccount->setLastName($input->lastName);
    $userAccount->setEmail($input->email);
    $userAccount->setPhone($input->phone);
    $userAccount->setPassword($input->password);
    $userAccount->setUserName($input->username);
    $userAccount->setGender($gender);
    $userAccount->setIsActive(true);
    $userAccount->setCreateDate(new \DateTime());
    $userAccount->setModifiedDate(new \DateTime());
    $em->persist($userAccount);

    $employee->setEmployeeId($input->employeeIdentifier);
    $employee->setCompanyLocation($companyLocation);
    $employee->setCompanyVehicle($companyVehicle);
    $employee->setIsActive(true);
    $em->persist($employee);

    $em->flush();

    return $userAccount;
  }


  /**
   * @param $input
   *
   * @return null|object
   */
  public function updateEmployee($input) {
    $em = $this->getEntityManager();

    $userAccount = $em->getRepository('OnSiteLubeAdminBundle:UserAccount')->find($input->userAccountId);
    $employee = $em->getRepository('OnSiteLubeAdminBundle:Employee')->find($input->employeeId);
    $companyLocation = $em->getRepository('OnSiteLubeAdminBundle:CompanyLocation')->find($input->locationId);
    $companyVehicle = $em->getRepository('OnSiteLubeAdminBundle:CompanyVehicle')->find($input->vehicleId);
    $gender = $em->getRepository('OnSiteLubeAdminBundle:Gender')->find($input->genderId);

    $address = $employee->getAddress();
    $address->setAddress($input->address);
    $address->setCity($input->city);
    $address->setState($input->state);
    $address->setPostalCode($input->postalCode);
    $address->setCountry('United States');
    $em->persist($address);

    $userAccount->setFirstName($input->firstName);
    $userAccount->setLastName($input->lastName);
    $userAccount->setEmail($input->email);
    $userAccount->setPhone($input->phone);
    $userAccount->setPassword($input->password);
    $userAccount->setUserName($input->username);
    $userAccount->setGender($gender);
    $userAccount->setModifiedDate(new \DateTime());
    $userAccount->setIsActive(true);
    $em->persist($userAccount);

    $employee->setEmployeeId($input->employeeIdentifier);
    $employee->setCompanyLocation($companyLocation);
    $employee->setCompanyVehicle($companyVehicle);
    $employee->setIsActive(true);
    $em->persist($employee);

    $em->flush();

    return $userAccount;
  }

  /**
   * @param $service
   *
   * @return object
   */
  public static function findRepository($service) {
    return $service->getDoctrine()->getRepository('OnSiteLubeAdminBundle:Employee');
  }
}
